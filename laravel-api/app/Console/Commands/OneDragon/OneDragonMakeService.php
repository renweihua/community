<?php

namespace App\Console\Commands\OneDragon;

use Illuminate\Support\Str;
use Nwidart\Modules\Support\Config\GenerateConfigReader;
use Nwidart\Modules\Traits\ModuleCommandTrait;
use Symfony\Component\Console\Input\InputArgument;

class OneDragonMakeService extends GeneratorCommand
{
    use ModuleCommandTrait;

    /**
     * The name of argument name.
     *
     * @var string
     */
    protected $argumentName = 'name';

    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'module:make-one-dragon-service';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new one-dragon-service.';

    public function getDefaultNamespace($rootNamespace): string
    {
        parent::getDefaultNamespace($rootNamespace); // TODO: Change the autogenerated stub

        $module = $this->laravel['modules'];

        return $module->config('paths.generator.services.namespace') ?: $module->config('paths.generator.services.path', 'Services');
    }

    /**
     * Get the console command arguments.
     *
     * @return array
     */
    protected function getArguments()
    {
        return [
            ['name', InputArgument::REQUIRED, 'The name of the form request class.'],
            ['module', InputArgument::OPTIONAL, 'The name of module will be used.'],
        ];
    }

    /**
     * @return mixed
     */
    protected function getTemplateContents()
    {
        $module = $this->laravel['modules']->findOrFail($this->getModuleName());

        $name = str_replace('Service', '', $this->getFileName());

        return (new Stub('/service.plain.stub', [
            'NAMESPACE' => $this->getClassNamespace($module),
            'CLASS'     => $this->getClass(),

            'MODEL_NAMESPACE'     => 'App\Models\\' . $name,
            'MODEL_NAME'     => $name . 'Model',
        ]))->render();
    }

    /**
     * @return mixed
     */
    protected function getDestinationFilePath()
    {
        $path = $this->laravel['modules']->getModulePath($this->getModuleName());

        return $path . 'Services/' . $this->getFileName() . '.php';
    }

    /**
     * @return string
     */
    public function getFileName($name = '')
    {
        return Str::studly($name ? $name : $this->argument('name'));
    }
}
